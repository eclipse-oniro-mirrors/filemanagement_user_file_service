# Copyright (c) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/filemanagement/user_file_service/filemanagement_aafwk.gni")
FMS_BASE_DIR = "//foundation/filemanagement/user_file_service/services"

group("fms") {
  deps = [
    ":fms_server",
    ":fms_service.cfg",
  ]
}

ohos_prebuilt_etc("fms_service.cfg") {
  source = "etc/fms_service.cfg"
  relative_install_dir = "init"
  subsystem_name = "filemanagement"
  part_name = "user_file_service"
}

ohos_shared_library("fms_server") {
  subsystem_name = "filemanagement"
  part_name = "user_file_service"

  include_dirs = [
    "$FMS_BASE_DIR/include",
    "$FMS_BASE_DIR/src/client",
    "$FMS_BASE_DIR/src/server",
    "$FMS_BASE_DIR/src/fileoper",
    "$FMS_BASE_DIR/include/fileoper",
    "//base/hiviewdfx/hilog/interfaces/native/innerkits/include/hilog",
    "//foundation/filemanagement/storage_service/services/storage_manager/include",
    "//foundation/filemanagement/storage_service/interfaces/innerkits/storage_manager/native",
  ]

  sources = [
    "src/client/file_manager_proxy.cpp",
    "src/fileoper/ext_storage/ext_storage_subscriber.cpp",
    "src/fileoper/ext_storage/storage_manager_inf.cpp",
    "src/fileoper/external_storage_oper.cpp",
    "src/fileoper/external_storage_utils.cpp",
    "src/fileoper/file_info.cpp",
    "src/fileoper/media_file_oper.cpp",
    "src/fileoper/media_file_utils.cpp",
    "src/fileoper/oper_factory.cpp",
    "src/server/file_manager_service.cpp",
    "src/server/file_manager_service_stub.cpp",
  ]

  deps = [
    "${aafwk_path}/frameworks/native/ability/native:abilitykit_native",
    "${aafwk_services_path}/abilitymgr:abilityms",
    "//base/hiviewdfx/hilog/interfaces/native/innerkits:libhilog",
    "//foundation/filemanagement/storage_service/interfaces/innerkits/storage_manager/native:storage_manager_sa_proxy",
    "//foundation/filemanagement/storage_service/services/storage_manager:storage_manager",
    "//foundation/multimedia/media_library/frameworks/innerkitsimpl/media_library_helper:media_library",
    "//foundation/multimedia/media_library/frameworks/innerkitsimpl/medialibrary_data_extension:medialibrary_data_extension",
    "//utils/native/base:utils",
  ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_manager",
    "ability_runtime:wantagent_innerkits",
    "access_token:libaccesstoken_sdk",
    "common_event_service:cesfwk_innerkits",
    "data_share:datashare_abilitykit",
    "data_share:datashare_common",
    "dataability:native_dataability",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
    "relational_store:native_appdatafwk",
    "relational_store:native_rdb",
    "safwk:system_ability_fwk",
    "samgr_standard:samgr_proxy",
  ]
}
